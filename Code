`timescale 1ns / 1ps

module digital_clock(
    input clk,               // 100 MHz clock
    input start_btn,         // Start counting on press
    input reset_btn,         // Reset to 00:00:00
    input set_btn,           // Set mode active LOW (0 = set mode)
    input [3:0] set_hour_tens,
    input [3:0] set_hour_units,
    input [3:0] set_min_tens,
    input [3:0] set_min_units,
    input [3:0] set_sec_tens,
    input [3:0] set_sec_units,
    output reg [6:0] seg,    // 7-seg segments (a-g)
    output reg [5:0] en      // Enable for 6 digits (active high)
);

    // Clock divider to generate 1 Hz tick from 100 MHz clock (unchanged)
    reg [23:0] clkdiv = 0;
    reg one_sec_tick = 0;

    always @(posedge clk) begin
        if (clkdiv == 24'd10_940_000) begin
            clkdiv <= 0;
            one_sec_tick <= 1;
        end else begin
            clkdiv <= clkdiv + 1;
            one_sec_tick <= 0;
        end
    end

    // Button debounce - 2-stage synchronizer for start and reset
    reg [1:0] start_sync = 0;
    reg [1:0] reset_sync = 0;

    always @(posedge clk) begin
        start_sync <= {start_sync[0], start_btn};
        reset_sync <= {reset_sync[0], reset_btn};
    end

    wire start_rising = (start_sync == 2'b01);
    wire reset_rising = (reset_sync == 2'b01);

    // Running flag: starts counting when start button is pressed, stops on reset or in set mode
    reg running = 0;
    always @(posedge clk) begin
        if (reset_rising)
            running <= 0;
        else if (set_btn == 0)  // in set mode clock stops running
            running <= 0;
        else if (start_rising)
            running <= 1;
    end

    // Time counters: seconds, minutes, hours
    reg [3:0] sec_units = 0;
    reg [3:0] sec_tens = 0;
    reg [3:0] min_units = 0;
    reg [3:0] min_tens = 0;
    reg [3:0] hour_units = 0;
    reg [3:0] hour_tens = 0;

    always @(posedge clk) begin
        if (reset_rising) begin
            sec_units <= 0;
            sec_tens <= 0;
            min_units <= 0;
            min_tens <= 0;
            hour_units <= 0;
            hour_tens <= 0;
        end else if (set_btn == 0) begin
            // Load input values continuously while in set mode
            // (You can latch on set_btn rising edge if preferred)
            sec_units <= set_sec_units;
            sec_tens <= set_sec_tens;
            min_units <= set_min_units;
            min_tens <= set_min_tens;
            hour_units <= set_hour_units;
            hour_tens <= set_hour_tens;
        end else if (one_sec_tick && running) begin
            // increment seconds
            if (sec_units == 9) begin
                sec_units <= 0;
                if (sec_tens == 5) begin
                    sec_tens <= 0;
                    // increment minutes
                    if (min_units == 9) begin
                        min_units <= 0;
                        if (min_tens == 5) begin
                            min_tens <= 0;
                            // increment hours (24h format)
                            if (hour_tens == 2 && hour_units == 3) begin
                                hour_tens <= 0;
                                hour_units <= 0;
                            end else begin
                                if (hour_units == 9) begin
                                    hour_units <= 0;
                                    hour_tens <= hour_tens + 1;
                                end else begin
                                    hour_units <= hour_units + 1;
                                end
                            end
                        end else begin
                            min_tens <= min_tens + 1;
                        end
                    end else begin
                        min_units <= min_units + 1;
                    end
                end else begin
                    sec_tens <= sec_tens + 1;
                end
            end else begin
                sec_units <= sec_units + 1;
            end
        end
    end

    // Display multiplexing clock divider (~1 kHz refresh)
    reg [15:0] mux_clkdiv = 0;
    reg [2:0] digit_index = 0;  // 0 to 5 for six digits

    always @(posedge clk) begin
        if (mux_clkdiv == 49999) begin
            mux_clkdiv <= 0;
            digit_index <= digit_index + 1;
            if (digit_index == 5)
                digit_index <= 0;
        end else
            mux_clkdiv <= mux_clkdiv + 1;
    end

    // 7-segment decoder (common cathode, active high segments)
    function [6:0] seg7;
        input [3:0] val;
        begin
            case (val)
                4'd0: seg7 = 7'b0111111;
                4'd1: seg7 = 7'b0000110;
                4'd2: seg7 = 7'b1011011;
                4'd3: seg7 = 7'b1001111;
                4'd4: seg7 = 7'b1100110;
                4'd5: seg7 = 7'b1101101;
                4'd6: seg7 = 7'b1111101;
                4'd7: seg7 = 7'b0000111;
                4'd8: seg7 = 7'b1111111;
                4'd9: seg7 = 7'b1101111;
                default: seg7 = 7'b0000000;
            endcase
        end
    endfunction

    // Assign segment and enable signals based on digit index
    always @(posedge clk) begin
        case (digit_index)
            3'd0: begin
                seg <= seg7(sec_units);
                en <= 6'b000001;
            end
            3'd1: begin
                seg <= seg7(sec_tens);
                en <= 6'b000010;
            end
            3'd2: begin
                seg <= seg7(min_units);
                en <= 6'b000100;
            end
            3'd3: begin
                seg <= seg7(min_tens);
                en <= 6'b001000;
            end
            3'd4: begin
                seg <= seg7(hour_units);
                en <= 6'b010000;
            end
            3'd5: begin
                seg <= seg7(hour_tens);
                en <= 6'b100000;
            end
            default: begin
                seg <= 7'b0000000;
                en <= 6'b000000;
            end
        endcase
    end

endmodule
